-- select * 
-- from purchases
-- order by id 
-- limit 10;

-- select * 
-- from gameplays 
-- order by id 
-- limit 10;

-- // Daily revenue
-- select 
-- date(created_at) as date,
-- round(sum(price),2) as revenue
-- from purchases
-- group by 1
-- order by 1;

-- // Daily revenue without refunds
-- select
-- date(created_at),
-- round(sum(price),2) as daily_rev
-- from purchases
-- where refunded_at is null
-- group by 1
-- order by 1;

-- // daily active user with most used platform
-- select 
-- date(created_at),
-- platform,
-- count(distinct user_id) as dau
-- from gameplays
-- group by 1, 2
-- order by 1, 2;

-- // Daily average revenue per purchasing user  This metric shows if the average amount of money spent by purchasers is going up over time.
-- select
-- date(created_at),
-- round( sum(price)/ count(distinct user_id), 2) as arppu
-- from purchases
-- where refunded_at is null
-- group by 1
-- order by 1;

-- with daily_revenue as (
--   select
--     date(created_at) as dt,
--     round(sum(price), 2) as rev
--   from purchases
--   where refunded_at is null
--   group by 1
-- )
-- select * from daily_revenue order by dt;

-- with daily_revenue as (
--   select
--     date(created_at) as dt,
--     round(sum(price), 2) as rev
--   from purchases
--   where refunded_at is null
--   group by 1
-- ), 
-- daily_players as (
--   select
--     date(created_at) as dt,
--     count(distinct user_id) as players
--   from gameplays
--   group by 1
-- )
-- select 
--   daily_revenue.dt,
--   daily_revenue.rev / daily_players.players
--   from daily_revenue
--     join daily_players using (dt);      -- (dt) because its aligning with both tables |special case


--// 1 Day retention
-- select
--   date(created_at) as dt,
--   user_id
-- from gameplays as g1
-- order by dt
-- limit 100;

-- self-join ->

-- select
--   date(g1.created_at) as dt,
--   g1.user_id
-- from gameplays as g1
--   join gameplays as g2 on
--     g1.user_id = g2.user_id
-- order by 1
-- limit 100;

-- select
--   date(g1.created_at) as dt,
--   g1.user_id,
--   g2.user_id
-- from gameplays as g1
--   join gameplays as g2 on
--     g1.user_id = g2.user_id
--     and date(g1.created_at) = date(datetime(g2.created_at, '-1 day'))
-- order by 1
-- limit 100;

-- ->

-- select
--   date(g1.created_at) as dt,
--   count(distinct g1.user_id) as total_users,
--   count(distinct g2.user_id) as retained_users
-- from gameplays as g1
--   left join gameplays as g2 on
--     g1.user_id = g2.user_id
--     and date(g1.created_at) = date(datetime(g2.created_at, '-1 day'))
-- group by 1
-- order by 1
-- limit 100;

-- ->

select
  date(g1.created_at) as dt,
  round(100 * count(distinct g2.user_id) /
    count(distinct g1.user_id)) as retention
from gameplays as g1
  left join gameplays as g2 on
    g1.user_id = g2.user_id
    and date(g1.created_at) = date(datetime(g2.created_at, '-1 day'))
group by 1
order by 1
limit 100;

-- Key Performance Indicators are high level health metrics for a business.
-- Daily Revenue is the sum of money made per day.
-- Daily Active Users are the number of unique users seen each day
-- Daily Average Revenue Per Purchasing User (ARPPU) is the average amount of money spent by purchasers each day.
-- Daily Average Revenue Per User (ARPU) is the average amount of money across all users.
-- 1 Day Retention is defined as the number of players from Day N who came back to play again on Day N+1.




